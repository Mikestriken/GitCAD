#!/bin/bash
echo "DEBUG: post-checkout hook trap-card triggered!" >&2
# ==============================================================================================
#                                         GIT LFS Hooks
# ==============================================================================================
command -v git-lfs >/dev/null 2>&1 || { echo >&2 "\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting the 'post-checkout' file in the hooks directory (set by 'core.hookspath'; usually '.git/hooks').\n"; exit 2; }

git lfs post-checkout "$@"
# ==============================================================================================
#                                 Verify and Retrieve Dependencies
# ==============================================================================================
# Ensure working dir is the root of the repo
# GIT_ROOT=$(git rev-parse --show-toplevel)
# cd "$GIT_ROOT"

# Import code used in this script
FUNCTIONS_FILE="FreeCAD_Automation/utils.sh"
source "$FUNCTIONS_FILE"

if [ -z "$PYTHON_PATH" ] || [ -z "$REQUIRE_LOCKS" ]; then
    echo "Config file missing or invalid; cannot proceed." >&2
    exit $FAIL
fi

# ==============================================================================================
#                                     Pull LFS files
# ==============================================================================================
git lfs pull
echo "DEBUG: Pulled lfs files" >&2

# ==============================================================================================
#                         Update .FCStd files with uncompressed files
# ==============================================================================================
# Note, Args: $1=old-head-sha $2=new-head-sha $3=checkout-type (1=branch, 0=file)
if [ "$3" == "1" ]; then
    echo "DEBUG: Processing Branch Checkout...." >&2

    if [ "$REQUIRE_LOCKS" == "1" ]; then
        CURRENT_USER=$(git config --get user.name) || {
            echo "Error: git config user.name not set!" >&2
            exit $FAIL
        }

        CURRENT_LOCKS=$(git lfs locks | awk '$2 == "'$CURRENT_USER'" {print $3}') || {
            echo "Error: failed to list of active lock info." >&2
            exit $FAIL
        }
    fi

    echo "DEBUG: diffing <remote sha1>='$1'..'$2'=<local sha1>" >&2
    changed_files=$(git diff --name-only $1..$2)

    echo "DEBUG: file changes: '$changed_files'" >&2

    # Get changed .lockfiles
    changed_lockfiles=$(echo "$changed_files" | grep -i '\.lockfile$')

    echo -e "\nDEBUG: checking changed lockfiles: '$(echo $changed_lockfiles | xargs)'" >&2

    for lockfile in $changed_lockfiles; do
        echo -e "\nDEBUG: checking '$lockfile'...." >&2

        FCStd_file_path=$(get_FCStd_file_from_lockfile "$lockfile") || continue

        echo "DEBUG: Detected changes, reloading '$FCStd_file_path'...." >&2

        # Import data to FCStd file
        "$PYTHON_PATH" "$FCStdFileTool" --SILENT --CONFIG-FILE --import "$FCStd_file_path" || {
            echo "Error: Failed to import $FCStd_file_path, skipping..." >&2
            continue
        }

        if [ "$REQUIRE_LOCKS" == "1" ]; then
            if echo "$CURRENT_LOCKS" | grep -q "$lockfile"; then
                # User has lock, set .FCStd file to writable
                make_writable "$FCStd_file_path"
                echo "DEBUG: set '$FCStd_file_path' writable." >&2
            else
                # User doesn't have lock, set .FCStd file to readonly
                make_readonly "$FCStd_file_path"
                echo "DEBUG: set '$FCStd_file_path' readonly." >&2
            fi
        fi
    done

elif [ "$3" == "0" ]; then
    # Note: post-checkout hook isn't provided enough information to handle `.FCStd` file checkouts appropriately (what files where checked out and what commit was checked out)
        # * Use coFCStdFiles.sh instead
    # echo "DEBUG: Processing File Checkout...." >&2
    :
else
    # Unknown checkout type
    echo "Unknown checkout type: $3, skipping .FCStd processing..." >&2
fi

exit $SUCCESS