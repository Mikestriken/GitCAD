#!/bin/bash
# ==============================================================================================
#                                         GIT LFS Hooks
# ==============================================================================================
command -v git-lfs >/dev/null 2>&1 || { echo >&2 "\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting the 'pre-push' file in the hooks directory (set by 'core.hookspath'; usually '.git/hooks').\n"; exit 2; }

git lfs pre-push "$@"
# ==============================================================================================
#                              Verify and Retrieve Dependencies
# ==============================================================================================
# Check if inside a Git repository and ensure working dir is the root of the repo
if ! git rev-parse --git-dir > /dev/null; then
    echo "Error: Not inside a Git repository" >&2
    exit 1
fi

GIT_ROOT=$(git rev-parse --show-toplevel)
cd "$GIT_ROOT"

# Import code used in this script
FUNCTIONS_FILE="FreeCAD_Automation/functions.sh"
source "$FUNCTIONS_FILE"

# Config file
CONFIG_FILE="FreeCAD_Automation/git-freecad-config.json"

# Python script
PYTHON_PATH=$(get_freecad_python_path "$CONFIG_FILE") || exit 1
FCStdFileTool="FreeCAD_Automation/FCStdFileTool.py"

# ==============================================================================================
#                       Check if user allowed to push local commits
# ==============================================================================================
# Get all tracked .FCStd files (case insensitive)
TRACKED_FCSTD_FILES=$(git ls-files | grep -i '\.fcstd$')
for FCStd_file in $TRACKED_FCSTD_FILES; do
    # Get the uncompressed directory path for this .FCStd file
    FCStd_dir_path=$(get_FCStd_dir "$FCStd_file") || {
        echo "Error: Failed to get directory path for '$FCStd_file'" >&2
        exit 1
    }

    # Check if this directory has changes in the push
        # Note: git pre-push hook args: $1=<local ref> $2=<local sha1> $3=<remote ref> $4=<remote sha1>
    if git diff --name-only $4..$2 | grep -q "^$FCStd_dir_path/"; then
        # Directory has changes, check lock for the .FCStd file
        FCSTD_FILE_HAS_VALID_LOCK=$(FCStd_file_has_valid_lock "$FCStd_file") || exit 1

        if [ $FCSTD_FILE_HAS_VALID_LOCK == 0 ]; then
            echo "ERROR: User doesn't have lock for '$FCStd_file'... Aborting commit operation..." >&2
            exit $FAIL
        fi
    fi
done