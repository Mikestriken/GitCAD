#!/bin/bash
# echo "DEBUG: pre-push hook trap-card triggered!" >&2
# ==============================================================================================
#                                       Script Overview
# ==============================================================================================
# Pre-push hook for Git. Runs Git LFS pre-push and checks if the user has locks for all .lockfiles changed in the commits being pushed.
# Cancels the push if locking is required and the user lacks locks for modified directories.

# ==============================================================================================
#                                         Capture Stdin
# ==============================================================================================
TEMP_DIR=".git/tempfiles"
mkdir -p "$TEMP_DIR"
stdin_tempfile=$(mktemp $TEMP_DIR/pre-push.XXXXXX)
# echo "DEBUG: Created Tempfile: '$stdin_tempfile'" >&2
cat >"$stdin_tempfile"
# echo "DEBUG: stdin='$(cat $stdin_tempfile)'" >&2

read -r local_ref local_sha remote_ref remote_sha < <(tail -n1 "$stdin_tempfile")
# echo "DEBUG: Local ref:   $local_ref" >&2
# echo "DEBUG: Local SHA:   $local_sha" >&2
# echo "DEBUG: Remote ref:  $remote_ref" >&2
# echo "DEBUG: Remote SHA:  $remote_sha" >&2

# ==============================================================================================
#                                         GIT LFS Hooks
# ==============================================================================================
command -v git-lfs >/dev/null 2>&1 || { echo >&2 "\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting the 'pre-push' file in the hooks directory (set by 'core.hookspath'; usually '.git/hooks').\n"; exit 2; }

git lfs pre-push "$@" <"$stdin_tempfile"

rm "$stdin_tempfile"
# ==============================================================================================
#                              Verify and Retrieve Dependencies
# ==============================================================================================
# Import code used in this script
FUNCTIONS_FILE="FreeCAD_Automation/utils.sh"
source "$FUNCTIONS_FILE"

# ==============================================================================================
#                       Check if user allowed to push local commits
# ==============================================================================================
# echo "DEBUG: args='$@'" >&2

if [ "$REQUIRE_LOCKS" == "$TRUE" ]; then
    CURRENT_USER=$(git config --get user.name) || {
        echo "Error: git config user.name not set!" >&2
        exit $FAIL
    }

    CURRENT_LOCKS=$(git lfs locks | awk '$2 == "'$CURRENT_USER'" {print $1}') || {
        echo "Error: failed to list of active lock info." >&2
        exit $FAIL
    }

    # echo "DEBUG: diffing <remote sha1>='$remote_sha'..'$local_sha'=<local sha1>" >&2
    changed_files=$(git diff-tree --no-commit-id --name-only -r "$remote_sha" "$local_sha")

    # Get changed .lockfiles
    changed_lockfiles=$(echo "$changed_files" | grep -i '\.lockfile$')

    # echo -e "\nDEBUG: checking changed lockfiles: '$(echo $changed_lockfiles | xargs)'" >&2

    for lockfile in $changed_lockfiles; do
        # echo -e "\nDEBUG: checking '$lockfile'...." >&2

        if echo "$CURRENT_LOCKS" | grep -q "$lockfile"; then
            # echo "DEBUG: User has valid lock for '$lockfile'" >&2
            :
        else
            echo "ERROR: User doesn't have lock for '$lockfile'... Aborting push operation..." >&2
            exit $FAIL
        fi
    done
fi

exit $SUCCESS